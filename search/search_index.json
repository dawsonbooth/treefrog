{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"treefrog \ud83d\udd17 Description \ud83d\udd17 Organize the Slippi game files in your filesystem according to their attributes. Installation \ud83d\udd17 With Python installed, simply run the following command to add the package to your project. pip install treefrog Usage \ud83d\udd17 Module \ud83d\udd17 Currently, the package supports organizing the files according to a supplied hierarchy, flattening the files against the supplied root folder, and renaming all the files according to their attributes. Each of these methods takes in an optional show_progress boolean parameter which, when true, invokes the presentation of a progress bar indicating the processing of all the game files according to the method. Organize \ud83d\udd17 The organize method serves the purpose of moving each game file found (deeply or otherwise) under the root folder to its proper location according to the supplied ordering. If no ordering is given, then treefrog will use the default ordering found in the treefrog.hierarchy module. Here is a simple example of calling this method: from treefrog import Hierarchy, Tree tree = Tree(\"slp/\", \"DTB#566\") # Root folder and user's netplay code ordering = ( { Hierarchy.Member.YEAR, Hierarchy.Member.MONTH }, { Hierarchy.Member.OPPONENT_CODE }, { Hierarchy.Member.CHARACTER, Hierarchy.Member.OPPONENT_CHARACTER }, { Hierarchy.Member.STAGE }, ) # An iterable of the desired levels of the hierarchy tree.organize(ordering) # Organize the files into subfolders according to the supplied attributes tree.resolve() # Physically adjust the filesystem to reflect the above change This package has some intelligence in place for naming the folders at one of these levels according to the combination of members that are provided. For example, if a level only consists of the CHARACTER and OPPONENT_CHARACTER members, the folders at that level will be named according to the convention: CHARACTER vs OPPONENT_CHARACTER . Feel free to provide your own logic for formatting the names of the folders at a particular level with a corresponding iterable of functions: from treefrog import Hierarchy, Tree from treefrog.format import default_format, character_name tree = Tree(\"slp/\", \"DTB#566\") ordering = ( { Hierarchy.Member.YEAR, Hierarchy.Member.MONTH }, { Hierarchy.Member.OPPONENT_CODE }, { Hierarchy.Member.CHARACTER, Hierarchy.Member.OPPONENT_CHARACTER }, { Hierarchy.Member.STAGE }, ) formatting = ( lambda year, month: f\"{default_format(**{Hierarchy.Member.MONTH: month})} {year}\", None, lambda character, opponent_character: f\"{character_name(character)} VS {character_name(opponent_character)}\", None ) tree.organize(ordering).resolve() The game attributes corresponding to the ordering will be passed as keyword arguments into the function you provide, so be sure to use correct argument names. If None formatting is supplied for a level, then treefrog will resort to the default_format function. Further, notice that you can use cascading methods to simplify your programming. Each of the methods organize , flatten , and rename will return a reference to the instance object on which it was called. Something like this: tree.organize().rename().resolve() will organize the game files, rename the files, and resolve the physical paths of the files in the order they are called. Flatten \ud83d\udd17 The flatten method serves the simple purpose of moving each game file found (deeply or otherwise) under the root folder back to the root folder itself. Here's an example of what calling this method may look like: from treefrog import Tree tree = Tree(\"slp/\", \"DTB#566\") tree.flatten().resolve() Rename \ud83d\udd17 The rename method simply renames each game file according to its attributes. Without a rename function supplied, treefrog will use the default_rename function found in the treefrog.format module. Alternatively, you may provide your own rename function as shown below: from treefrog import Hierarchy, Tree from treefrog.format import character_name def rename(code, name, character, opponent_code, opponent_name, opponent_character, **kwargs): return \" vs \".join(( f\"[{code}] {name} ({character_name(character)})\", f\"[{opponent_code}] {opponent_name} ({character_name(opponent_character)})\" )) + \".slp\" Tree(\"slp/\", \"DTB#566\").rename(rename_func=rename).resolve() All game attributes will be passed as keyword arguments into the function you provide, so be sure to catch the ones you don't use with **kwargs or you'll get an error! Command-Line \ud83d\udd17 This is also command-line program, and can be executed as follows: python -m treefrog [-h] -c NETPLAY_CODE [-o | -f] [-r] [-p] ROOT_FOLDER Positional arguments: ROOT_FOLDER Slippi folder root path Optional arguments: -h, --help show this help message and exit -c NETPLAY_CODE, --netplay-code NETPLAY_CODE Netplay code (e.g. DTB#566) -o, --organize Whether to organize the folder hierarchy -f, --flatten Whether to flatten the folder hierarchy -r, --rename Whether to rename the files according to the game attributes -p, --show-progress Whether to show a progress bar For example, the following command will organize all the game files under the slp directory. python -m treefrog \"slp\" -c \"DTB#566\" -op Feel free to check out the docs for more information. License \ud83d\udd17 This software is released under the terms of MIT license .","title":"Overview"},{"location":"#treefrog","text":"","title":"treefrog"},{"location":"#description","text":"Organize the Slippi game files in your filesystem according to their attributes.","title":"Description"},{"location":"#installation","text":"With Python installed, simply run the following command to add the package to your project. pip install treefrog","title":"Installation"},{"location":"#usage","text":"","title":"Usage"},{"location":"#module","text":"Currently, the package supports organizing the files according to a supplied hierarchy, flattening the files against the supplied root folder, and renaming all the files according to their attributes. Each of these methods takes in an optional show_progress boolean parameter which, when true, invokes the presentation of a progress bar indicating the processing of all the game files according to the method.","title":"Module"},{"location":"#organize","text":"The organize method serves the purpose of moving each game file found (deeply or otherwise) under the root folder to its proper location according to the supplied ordering. If no ordering is given, then treefrog will use the default ordering found in the treefrog.hierarchy module. Here is a simple example of calling this method: from treefrog import Hierarchy, Tree tree = Tree(\"slp/\", \"DTB#566\") # Root folder and user's netplay code ordering = ( { Hierarchy.Member.YEAR, Hierarchy.Member.MONTH }, { Hierarchy.Member.OPPONENT_CODE }, { Hierarchy.Member.CHARACTER, Hierarchy.Member.OPPONENT_CHARACTER }, { Hierarchy.Member.STAGE }, ) # An iterable of the desired levels of the hierarchy tree.organize(ordering) # Organize the files into subfolders according to the supplied attributes tree.resolve() # Physically adjust the filesystem to reflect the above change This package has some intelligence in place for naming the folders at one of these levels according to the combination of members that are provided. For example, if a level only consists of the CHARACTER and OPPONENT_CHARACTER members, the folders at that level will be named according to the convention: CHARACTER vs OPPONENT_CHARACTER . Feel free to provide your own logic for formatting the names of the folders at a particular level with a corresponding iterable of functions: from treefrog import Hierarchy, Tree from treefrog.format import default_format, character_name tree = Tree(\"slp/\", \"DTB#566\") ordering = ( { Hierarchy.Member.YEAR, Hierarchy.Member.MONTH }, { Hierarchy.Member.OPPONENT_CODE }, { Hierarchy.Member.CHARACTER, Hierarchy.Member.OPPONENT_CHARACTER }, { Hierarchy.Member.STAGE }, ) formatting = ( lambda year, month: f\"{default_format(**{Hierarchy.Member.MONTH: month})} {year}\", None, lambda character, opponent_character: f\"{character_name(character)} VS {character_name(opponent_character)}\", None ) tree.organize(ordering).resolve() The game attributes corresponding to the ordering will be passed as keyword arguments into the function you provide, so be sure to use correct argument names. If None formatting is supplied for a level, then treefrog will resort to the default_format function. Further, notice that you can use cascading methods to simplify your programming. Each of the methods organize , flatten , and rename will return a reference to the instance object on which it was called. Something like this: tree.organize().rename().resolve() will organize the game files, rename the files, and resolve the physical paths of the files in the order they are called.","title":"Organize"},{"location":"#flatten","text":"The flatten method serves the simple purpose of moving each game file found (deeply or otherwise) under the root folder back to the root folder itself. Here's an example of what calling this method may look like: from treefrog import Tree tree = Tree(\"slp/\", \"DTB#566\") tree.flatten().resolve()","title":"Flatten"},{"location":"#rename","text":"The rename method simply renames each game file according to its attributes. Without a rename function supplied, treefrog will use the default_rename function found in the treefrog.format module. Alternatively, you may provide your own rename function as shown below: from treefrog import Hierarchy, Tree from treefrog.format import character_name def rename(code, name, character, opponent_code, opponent_name, opponent_character, **kwargs): return \" vs \".join(( f\"[{code}] {name} ({character_name(character)})\", f\"[{opponent_code}] {opponent_name} ({character_name(opponent_character)})\" )) + \".slp\" Tree(\"slp/\", \"DTB#566\").rename(rename_func=rename).resolve() All game attributes will be passed as keyword arguments into the function you provide, so be sure to catch the ones you don't use with **kwargs or you'll get an error!","title":"Rename"},{"location":"#command-line","text":"This is also command-line program, and can be executed as follows: python -m treefrog [-h] -c NETPLAY_CODE [-o | -f] [-r] [-p] ROOT_FOLDER Positional arguments: ROOT_FOLDER Slippi folder root path Optional arguments: -h, --help show this help message and exit -c NETPLAY_CODE, --netplay-code NETPLAY_CODE Netplay code (e.g. DTB#566) -o, --organize Whether to organize the folder hierarchy -f, --flatten Whether to flatten the folder hierarchy -r, --rename Whether to rename the files according to the game attributes -p, --show-progress Whether to show a progress bar For example, the following command will organize all the game files under the slp directory. python -m treefrog \"slp\" -c \"DTB#566\" -op Feel free to check out the docs for more information.","title":"Command-Line"},{"location":"#license","text":"This software is released under the terms of MIT license .","title":"License"},{"location":"documentation/","text":"treefrog \ud83d\udd17 treefrog.tree \ud83d\udd17 treefrog.rename \ud83d\udd17 treefrog.format \ud83d\udd17 treefrog.hierarchy \ud83d\udd17 treefrog.__main__ \ud83d\udd17","title":"Documentation"},{"location":"documentation/#treefrog","text":"","title":"treefrog"},{"location":"documentation/#treefrogtree","text":"","title":"treefrog.tree"},{"location":"documentation/#treefrogrename","text":"","title":"treefrog.rename"},{"location":"documentation/#treefrogformat","text":"","title":"treefrog.format"},{"location":"documentation/#treefroghierarchy","text":"","title":"treefrog.hierarchy"},{"location":"documentation/#treefrog__main__","text":"","title":"treefrog.__main__"}]}